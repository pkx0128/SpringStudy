<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置AccountService-->
    <bean id="accountService" class="com.pankx.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>

<!--    配置JdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
<!--        <property name="dataSource" ref="datasource"></property>-->
        <constructor-arg name="dataSource" ref="datasource"></constructor-arg>
    </bean>

<!--    配置账户的持久层AccountDao-->
    <bean id="accountDao" class="com.pankx.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>


<!--    配置datasource-->
    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost/eesy"></property>
        <property name="username"   value="root"></property>
        <property name="password"   value="Pankx0128"></property>
    </bean>

<!--
    spring中基于xml的声明式事务控制配置步骤
    1.配置事务管理器
    2.配置事务通知
            导入事务的约束tx和aop的命名空间和约束
            使用tx:advice标签配置事务的通知
                id:给事务通知起一个唯一标识
                transaction-manager:给事务通知设置一个管理器的引用(把事务通知交给管理器管理)
    3.配置配置AOP的通用切入点表达式
    4.建立切入点表达式与通知的的对应关系
                能过标签aop:advisor配置
                    advice-ref:通知的引用
                    pointcut-ref:切入点表达式的引用
    5.配置事务通知的属性
        在标签tx:advice内部配置



-->
<!--    配置事管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>
<!--    配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
<!--        配置事务通知的属性

            isolation:用于指定事务的隔离级别，默认值为DEFAULT,表示使用数据库的默认级别。
            propagation:用于指定事务的传播行为，默认值为REQUIRED,表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS.
            read-only:用于指定事务是否为只读，只有查询方法可以设置为true.默认为false，表示可读写。
            timeout:表示事务的超时时间，默认值为-1，表示永不过期，如果指定值，以秒为单位。
            rollback-for:用于指定一个异常，当发生该异常时事务回滚，产生其他异常时事务不回滚，没有默认值时表示任何异常都回滚。
            no-rollback-for:用于指定一个异常，当发生该异常时事务不回滚，产生其他异常时事务回滚，没有默认值时表示任何异常都回滚。


-->
        <tx:attributes>
<!--            -->
            <tx:method name="*" propagation="REQUIRED" read-only="false" />
<!--            查询find*优先级高于*的优先级-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
<!--    配置AOP-->
    <aop:config>
<!--    配置AOP的切入点表达式-->
        <aop:pointcut id="pt1" expression="execution(* com.pankx.service.impl.*.*(..))"/>
<!--        建立切入点表达式与通知的对应关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>
</beans>